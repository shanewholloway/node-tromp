// Generated by CoffeeScript 1.4.0
var closureQueue, taskQueue;

closureQueue = function(tgt, callback) {
  var finish, k, n0, n1, self, start, v;
  if (typeof tgt === 'function') {
    callback = tgt;
    tgt = null;
  }
  n0 = 0;
  n1 = 0;
  start = function() {
    if (typeof self.start === "function") {
      self.start(self, n1 - n0);
    }
    ++n0;
    return finish;
  };
  finish = function() {
    var isdone;
    isdone = ++n1 === n0;
    if (typeof self.finish === "function") {
      self.finish(self, n1 - n0);
    }
    if (isdone != null) {
      if (typeof self.done === "function") {
        self.done(self, n1);
      }
      if (typeof callback === "function") {
        callback(null, self, n1);
      }
    }
    return isdone;
  };
  finish.wrap = function(callback) {
    return function() {
      finish();
      return callback.apply(this, arguments);
    };
  };
  Object.defineProperties(self = start, {
    started: {
      get: function() {
        return n0;
      }
    },
    completed: {
      get: function() {
        return n1;
      }
    },
    active: {
      get: function() {
        return n1 - n0;
      }
    },
    valueOf: {
      value: function() {
        return n1 - n0;
      }
    },
    isIdle: {
      value: function() {
        return n1 === n0;
      }
    },
    isDone: {
      value: function() {
        return n1 === n0 && n0 > 0;
      }
    }
  });
  if (tgt != null) {
    for (k in tgt) {
      v = tgt[k];
      tgt[k] = v;
    }
  }
  return self;
};

exports.closureQueue = closureQueue;

taskQueue = function(limit, tgt, callback) {
  var addTask, cq, k, self, step, taskq, v;
  if (typeof limit === 'function') {
    callback = limit;
    tgt = null;
    limit = 9e9;
  }
  if (typeof tgt === 'function') {
    callback = tgt;
    tgt = null;
  }
  if (!(typeof limit === 'number')) {
    tgt = limit;
    limit = (tgt.limit || 9e9) + 0;
  }
  cq = closureQueue({
    finish: function(cq, nActive) {
      step();
    },
    done: function(cq, nComplete) {
      if (typeof callback === "function") {
        callback(null, self, n0);
      }
      if (typeof self.done === "function") {
        self.done(self, n0);
      }
    }
  });
  taskq = [];
  addTask = function(fn) {
    taskq.push(fn);
    step();
    return self;
  };
  step = function() {
    var task;
    while (taskq.length > 0 && limit >= cq.active) {
      task = taskq.shift();
      try {
        if (typeof task === "function") {
          task(cq());
        }
      } catch (err) {
        if (self.error != null) {
          self.error(err);
        } else {
          console.error(err.stack || err);
        }
      }
    }
    return self;
  };
  Object.defineProperties(self = addTask, {
    active: {
      get: function() {
        return cq.active;
      }
    },
    backlog: {
      get: function() {
        return taskq.length;
      }
    },
    incomplete: {
      get: function() {
        return cq.active + taskq.length;
      }
    },
    completed: {
      get: function() {
        return cq.completed;
      }
    },
    isIdle: {
      value: function() {
        return taskq.length === 0 && cq.isIdle();
      }
    },
    isDone: {
      value: function() {
        return taskq.length === 0 && cq.isDone();
      }
    }
  });
  if (tgt != null) {
    for (k in tgt) {
      v = tgt[k];
      tgt[k] = v;
    }
  }
  return self;
};

exports.taskQueue = taskQueue;
